package dgcom.model.qvo.srv;

import dgcom.model.qvo.srv.common.SrvJobCardLogCIC_0051QVORow;
import dgcom.model.stand.DigicomClass;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 09 12:10:50 PKT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SrvJobCardLogCIC_0051QVORowImpl extends ViewRowImpl implements SrvJobCardLogCIC_0051QVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Jobcardno,
        Docid,
        Doctype,
        Doctypeid,
        DocDate,
        CrDate,
        DocDesc,
        ReverseChk,
        txtDays,
        SrvJobcardVO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int JOBCARDNO = AttributesEnum.Jobcardno.index();
    public static final int DOCID = AttributesEnum.Docid.index();
    public static final int DOCTYPE = AttributesEnum.Doctype.index();
    public static final int DOCTYPEID = AttributesEnum.Doctypeid.index();
    public static final int DOCDATE = AttributesEnum.DocDate.index();
    public static final int CRDATE = AttributesEnum.CrDate.index();
    public static final int DOCDESC = AttributesEnum.DocDesc.index();
    public static final int REVERSECHK = AttributesEnum.ReverseChk.index();
    public static final int TXTDAYS = AttributesEnum.txtDays.index();
    public static final int SRVJOBCARDVO = AttributesEnum.SrvJobcardVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SrvJobCardLogCIC_0051QVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Jobcardno.
     * @return the Jobcardno
     */
    public String getJobcardno() {
        return (String) getAttributeInternal(JOBCARDNO);
    }

    /**
     * Gets the attribute value for the calculated attribute Docid.
     * @return the Docid
     */
    public String getDocid() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute Doctype.
     * @return the Doctype
     */
    public String getDoctype() {
        return (String) getAttributeInternal(DOCTYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute Doctypeid.
     * @return the Doctypeid
     */
    public String getDoctypeid() {
        return (String) getAttributeInternal(DOCTYPEID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocDate.
     * @return the DocDate
     */
    public Date getDocDate() {
        return (Date) getAttributeInternal(DOCDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute CrDate.
     * @return the CrDate
     */
    public Date getCrDate() {
        return (Date) getAttributeInternal(CRDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute DocDesc.
     * @return the DocDesc
     */
    public String getDocDesc() {
        return (String) getAttributeInternal(DOCDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute ReverseChk.
     * @return the ReverseChk
     */
    public String getReverseChk() {
        return (String) getAttributeInternal(REVERSECHK);
    }

    /**
     * Gets the attribute value for the calculated attribute txtDays.
     * @return the txtDays
     */
    public String gettxtDays() {
        return (String) getAttributeInternal(TXTDAYS);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link SrvJobcardVO.
     */
    public Row getSrvJobcardVO() {
        return (Row) getAttributeInternal(SRVJOBCARDVO);
    }

    /**
     * Sets the master-detail link SrvJobcardVO between this object and <code>value</code>.
     */
    public void setSrvJobcardVO(Row value) {
        setAttributeInternal(SRVJOBCARDVO, value);
    }
    public void doReverseTransaction() {
       // this.getDBTransaction().commit();
        String reversed=getReverseChk();
        if (reversed!=null && reversed.equals("Y")) {
            throw new JboException("This Document is already reversed. ("+getDocid()+")");
       }
       
        String plsql="begin ?:=PKG_SERVICE.FUNC_SRV_JOBCARD_REVERSAL('"+getJobcardno()+"','"+getDocid()+"','"+getDoctypeid()+"','"+getDoctype()+"','"+DigicomClass.getConnectedUser()+"'); END;";
        System.out.println(plsql);
        

        CallableStatement cs=this.getDBTransaction().createCallableStatement(plsql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.executeUpdate();
            if (!cs.getString(1).equals("Y")) {
               this.getDBTransaction().commit();
                throw new JboException("Unable to supervise due to "+cs.getString(1));
               
           }
            this.getDBTransaction().commit();
        } catch (SQLException e) {
            this.getDBTransaction().commit();
            throw new JboException("Unable to supervise ");
        }
        String str=getViewObject().getCurrentRow().getAttribute("Docid").toString()+getViewObject().getCurrentRow().getAttribute("Doctype").toString();
        this.getViewObject().executeQuery();
        String strto=getViewObject().first().getAttribute("Docid").toString()+getViewObject().first().getAttribute("Doctype").toString();
        if(str.equals(strto)) {
            return;
        }
        while(getViewObject().hasNext()) {
            Row cr=getViewObject().next();
            strto=cr.getAttribute("Docid").toString()+cr.getAttribute("Doctype").toString();
            if(str.equals(strto)) {
                return;
            }
        }
        
    }         
}

