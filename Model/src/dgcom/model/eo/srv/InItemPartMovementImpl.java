package dgcom.model.eo.srv;

import dgcom.model.stand.DigicomClass;
import dgcom.model.stand.DigicomEntityImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 23 15:46:47 PKT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InItemPartMovementImpl extends DigicomEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        MappId,
        Locationid,
        FromStoreid,
        ToStoreid,
        MapDate,
        Doctype,
        Posted,
        Postedby,
        Createdby,
        CreatedDate,
        Modifiedby,
        ModifiedDate,
        Remarks,
        txtFromStoreName,
        txtToStoreName,
        InIpmDetail,
        AllStores,
        AllStores1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int MAPPID = AttributesEnum.MappId.index();
    public static final int LOCATIONID = AttributesEnum.Locationid.index();
    public static final int FROMSTOREID = AttributesEnum.FromStoreid.index();
    public static final int TOSTOREID = AttributesEnum.ToStoreid.index();
    public static final int MAPDATE = AttributesEnum.MapDate.index();
    public static final int DOCTYPE = AttributesEnum.Doctype.index();
    public static final int POSTED = AttributesEnum.Posted.index();
    public static final int POSTEDBY = AttributesEnum.Postedby.index();
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int TXTFROMSTORENAME = AttributesEnum.txtFromStoreName.index();
    public static final int TXTTOSTORENAME = AttributesEnum.txtToStoreName.index();
    public static final int INIPMDETAIL = AttributesEnum.InIpmDetail.index();
    public static final int ALLSTORES = AttributesEnum.AllStores.index();
    public static final int ALLSTORES1 = AttributesEnum.AllStores1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InItemPartMovementImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("dgcom.model.eo.srv.InItemPartMovement");
    }


    /**
     * Gets the attribute value for MappId, using the alias name MappId.
     * @return the value of MappId
     */
    public String getMappId() {
        return (String) getAttributeInternal(MAPPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MappId.
     * @param value value to set the MappId
     */
    public void setMappId(String value) {
        setAttributeInternal(MAPPID, value);
    }

    /**
     * Gets the attribute value for Locationid, using the alias name Locationid.
     * @return the value of Locationid
     */
    public String getLocationid() {
        return (String) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Locationid.
     * @param value value to set the Locationid
     */
    public void setLocationid(String value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for FromStoreid, using the alias name FromStoreid.
     * @return the value of FromStoreid
     */
    public String getFromStoreid() {
        return (String) getAttributeInternal(FROMSTOREID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromStoreid.
     * @param value value to set the FromStoreid
     */
    public void setFromStoreid(String value) {
        setAttributeInternal(FROMSTOREID, value);
    }

    /**
     * Gets the attribute value for ToStoreid, using the alias name ToStoreid.
     * @return the value of ToStoreid
     */
    public String getToStoreid() {
        return (String) getAttributeInternal(TOSTOREID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToStoreid.
     * @param value value to set the ToStoreid
     */
    public void setToStoreid(String value) {
        setAttributeInternal(TOSTOREID, value);
    }

    /**
     * Gets the attribute value for MapDate, using the alias name MapDate.
     * @return the value of MapDate
     */
    public Date getMapDate() {
        return (Date) getAttributeInternal(MAPDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MapDate.
     * @param value value to set the MapDate
     */
    public void setMapDate(Date value) {
        setAttributeInternal(MAPDATE, value);
    }

    /**
     * Gets the attribute value for Doctype, using the alias name Doctype.
     * @return the value of Doctype
     */
    public String getDoctype() {
        return (String) getAttributeInternal(DOCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Doctype.
     * @param value value to set the Doctype
     */
    public void setDoctype(String value) {
        setAttributeInternal(DOCTYPE, value);
    }

    /**
     * Gets the attribute value for Posted, using the alias name Posted.
     * @return the value of Posted
     */
    public String getPosted() {
        return (String) getAttributeInternal(POSTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Posted.
     * @param value value to set the Posted
     */
    public void setPosted(String value) {
        setAttributeInternal(POSTED, value);
    }

    /**
     * Gets the attribute value for Postedby, using the alias name Postedby.
     * @return the value of Postedby
     */
    public String getPostedby() {
        return (String) getAttributeInternal(POSTEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Postedby.
     * @param value value to set the Postedby
     */
    public void setPostedby(String value) {
        setAttributeInternal(POSTEDBY, value);
    }

    /**
     * Gets the attribute value for Createdby, using the alias name Createdby.
     * @return the value of Createdby
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Createdby.
     * @param value value to set the Createdby
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Modifiedby, using the alias name Modifiedby.
     * @return the value of Modifiedby
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Modifiedby.
     * @param value value to set the Modifiedby
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }


    /**
     * Gets the attribute value for txtFromStoreName, using the alias name txtFromStoreName.
     * @return the value of txtFromStoreName
     */
    public String gettxtFromStoreName() {
        return (String) getAttributeInternal(TXTFROMSTORENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtFromStoreName.
     * @param value value to set the txtFromStoreName
     */
    public void settxtFromStoreName(String value) {
        setAttributeInternal(TXTFROMSTORENAME, value);
    }

    /**
     * Gets the attribute value for txtToStoreName, using the alias name txtToStoreName.
     * @return the value of txtToStoreName
     */
    public String gettxtToStoreName() {
        return (String) getAttributeInternal(TXTTOSTORENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtToStoreName.
     * @param value value to set the txtToStoreName
     */
    public void settxtToStoreName(String value) {
        setAttributeInternal(TXTTOSTORENAME, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInIpmDetail() {
        return (RowIterator) getAttributeInternal(INIPMDETAIL);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getAllStores() {
        return (EntityImpl) getAttributeInternal(ALLSTORES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setAllStores(EntityImpl value) {
        setAttributeInternal(ALLSTORES, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getAllStores1() {
        return (EntityImpl) getAttributeInternal(ALLSTORES1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setAllStores1(EntityImpl value) {
        setAttributeInternal(ALLSTORES1, value);
    }


    /**
     * @param mappId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String mappId) {
        return new Key(new Object[] { mappId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            ApplicationModule am=this.getDBTransaction().getRootApplicationModule();
            ViewObject        vo=am.findViewObject("IPMPKPK");
            if (vo!=null)
                {
                   vo.remove();     
                }
            vo=am.createViewObjectFromQueryStmt("IPMPKPK",
                                                "Select 2||'"+getLocationid()+"'||'"+DigicomClass.doGetFormattedDate(getMapDate().toString(), "yyMM")+"'||Lpad(nvl(max(to_number(substr(Mapp_Id,-4)))+1,1) ,4,'0') as PK \n"+
                                                "from IN_Item_Part_Movement \n"+
                                                "Where to_char(Map_Date,'rrmm') ='"+ DigicomClass.doGetFormattedDate(getMapDate().toString(), "yyMM")+"' \n"+
                                                "and locationid = '"+getLocationid()+"'");
            vo.executeQuery();
            setMappId(vo.first().getAttribute(0).toString());

        }        
        super.doDML(operation, e);
    }
}

