package dgcom.model.eo.srv;

import dgcom.model.stand.DigicomClass;
import dgcom.model.stand.DigicomEntityImpl;

import java.math.BigDecimal;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 22 10:53:57 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SrvJobhandovertolabImpl extends DigicomEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Jhoid,
        Locationid,
        Hodate,
        Remarks,
        Posted,
        Postedby,
        Createdby,
        CreatedDate,
        Modifiedby,
        ModifiedDate,
        IsMigrated,
        MigratedDate,
        Jhoseq,
        SrvJhotldetl;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int JHOID = AttributesEnum.Jhoid.index();
    public static final int LOCATIONID = AttributesEnum.Locationid.index();
    public static final int HODATE = AttributesEnum.Hodate.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int POSTED = AttributesEnum.Posted.index();
    public static final int POSTEDBY = AttributesEnum.Postedby.index();
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int ISMIGRATED = AttributesEnum.IsMigrated.index();
    public static final int MIGRATEDDATE = AttributesEnum.MigratedDate.index();
    public static final int JHOSEQ = AttributesEnum.Jhoseq.index();
    public static final int SRVJHOTLDETL = AttributesEnum.SrvJhotldetl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SrvJobhandovertolabImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("dgcom.model.eo.srv.SrvJobhandovertolab");
    }


    /**
     * Gets the attribute value for Jhoid, using the alias name Jhoid.
     * @return the value of Jhoid
     */
    public String getJhoid() {
        return (String) getAttributeInternal(JHOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Jhoid.
     * @param value value to set the Jhoid
     */
    public void setJhoid(String value) {
        setAttributeInternal(JHOID, value);
    }

    /**
     * Gets the attribute value for Locationid, using the alias name Locationid.
     * @return the value of Locationid
     */
    public String getLocationid() {
        return (String) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Locationid.
     * @param value value to set the Locationid
     */
    public void setLocationid(String value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for Hodate, using the alias name Hodate.
     * @return the value of Hodate
     */
    public Date getHodate() {
        return (Date) getAttributeInternal(HODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hodate.
     * @param value value to set the Hodate
     */
    public void setHodate(Date value) {
        setAttributeInternal(HODATE, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for Posted, using the alias name Posted.
     * @return the value of Posted
     */
    public String getPosted() {
        return (String) getAttributeInternal(POSTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Posted.
     * @param value value to set the Posted
     */
    public void setPosted(String value) {
        setAttributeInternal(POSTED, value);
    }

    /**
     * Gets the attribute value for Postedby, using the alias name Postedby.
     * @return the value of Postedby
     */
    public String getPostedby() {
        return (String) getAttributeInternal(POSTEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Postedby.
     * @param value value to set the Postedby
     */
    public void setPostedby(String value) {
        setAttributeInternal(POSTEDBY, value);
    }

    /**
     * Gets the attribute value for Createdby, using the alias name Createdby.
     * @return the value of Createdby
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Createdby.
     * @param value value to set the Createdby
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Modifiedby, using the alias name Modifiedby.
     * @return the value of Modifiedby
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Modifiedby.
     * @param value value to set the Modifiedby
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for IsMigrated, using the alias name IsMigrated.
     * @return the value of IsMigrated
     */
    public String getIsMigrated() {
        return (String) getAttributeInternal(ISMIGRATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsMigrated.
     * @param value value to set the IsMigrated
     */
    public void setIsMigrated(String value) {
        setAttributeInternal(ISMIGRATED, value);
    }

    /**
     * Gets the attribute value for MigratedDate, using the alias name MigratedDate.
     * @return the value of MigratedDate
     */
    public Date getMigratedDate() {
        return (Date) getAttributeInternal(MIGRATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MigratedDate.
     * @param value value to set the MigratedDate
     */
    public void setMigratedDate(Date value) {
        setAttributeInternal(MIGRATEDDATE, value);
    }

    /**
     * Gets the attribute value for Jhoseq, using the alias name Jhoseq.
     * @return the value of Jhoseq
     */
    public Integer getJhoseq() {
        return (Integer) getAttributeInternal(JHOSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Jhoseq.
     * @param value value to set the Jhoseq
     */
    public void setJhoseq(Integer value) {
        setAttributeInternal(JHOSEQ, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrvJhotldetl() {
        return (RowIterator) getAttributeInternal(SRVJHOTLDETL);
    }


    /**
     * @param jhoseq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer jhoseq) {
        return new Key(new Object[] { jhoseq });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }
    @Override
    protected void create(AttributeList attributeList) {
        // TODO Implement this method
        setSrvSequenceName("SRV_JOBHANDOVERTOLAB_SEQ");
        super.create(attributeList);
    }
    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
           ApplicationModule am=this.getDBTransaction().getRootApplicationModule();
           ViewObject        vo=am.findViewObject("myJobCardPK");
           if (vo!=null)
               {
                  vo.remove();     
               }
           vo=am.createViewObjectFromQueryStmt("myJobCardPK",
                                               "Select 2||'"+getLocationid()+"'||'"+DigicomClass.doGetFormattedDate(getHodate().toString(), "yyMM")+"'||Lpad(nvl(max(to_number(substr(JHOId,-4)))+1,1) ,4,'0') as PK \n"+
                                               "from SRV_JOBHANDOVERTOLAB \n"+
                                               "Where to_char(HODATE,'rrmm') ='"+ DigicomClass.doGetFormattedDate(getHodate().toString(), "yyMM")+"' \n"+
                                               "and LOCATIONID = '"+getLocationid()+"'");
           vo.executeQuery();
           populateAttributeAsChanged(JHOID, vo.first().getAttribute(0).toString());
//           setJhoid(vo.first().getAttribute(0).toString());
       }
        super.doDML(operation, e);
    }
}

