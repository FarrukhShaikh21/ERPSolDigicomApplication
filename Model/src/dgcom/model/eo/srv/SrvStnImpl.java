package dgcom.model.eo.srv;

import dgcom.model.stand.DigicomClass;
import dgcom.model.stand.DigicomEntityImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 10 13:40:40 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SrvStnImpl extends DigicomEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Stnno,
        Locationid,
        Tolocationid,
        Supplierid,
        DemandId,
        Stntype,
        Stndate,
        StnStatus,
        Fromdate,
        Todate,
        Remarks,
        Posted,
        Postedby,
        Createdby,
        CreatedDate,
        Modifiedby,
        ModifiedDate,
        IsMigrated,
        MigratedDate,
        txtFromStore,
        txtToStore,
        txtDemandId,
        txtModelID,
        txtCatID,
        txtFromStoreName,
        txtToStoreName,
        txtCatName,
        txtModelName,
        SrvStnparts,
        AccSrvStnSrvStnPartsPopulation,
        AccSrvStnSrvStnPartPrice;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int STNNO = AttributesEnum.Stnno.index();
    public static final int LOCATIONID = AttributesEnum.Locationid.index();
    public static final int TOLOCATIONID = AttributesEnum.Tolocationid.index();
    public static final int SUPPLIERID = AttributesEnum.Supplierid.index();
    public static final int DEMANDID = AttributesEnum.DemandId.index();
    public static final int STNTYPE = AttributesEnum.Stntype.index();
    public static final int STNDATE = AttributesEnum.Stndate.index();
    public static final int STNSTATUS = AttributesEnum.StnStatus.index();
    public static final int FROMDATE = AttributesEnum.Fromdate.index();
    public static final int TODATE = AttributesEnum.Todate.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int POSTED = AttributesEnum.Posted.index();
    public static final int POSTEDBY = AttributesEnum.Postedby.index();
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int ISMIGRATED = AttributesEnum.IsMigrated.index();
    public static final int MIGRATEDDATE = AttributesEnum.MigratedDate.index();
    public static final int TXTFROMSTORE = AttributesEnum.txtFromStore.index();
    public static final int TXTTOSTORE = AttributesEnum.txtToStore.index();
    public static final int TXTDEMANDID = AttributesEnum.txtDemandId.index();
    public static final int TXTMODELID = AttributesEnum.txtModelID.index();
    public static final int TXTCATID = AttributesEnum.txtCatID.index();
    public static final int TXTFROMSTORENAME = AttributesEnum.txtFromStoreName.index();
    public static final int TXTTOSTORENAME = AttributesEnum.txtToStoreName.index();
    public static final int TXTCATNAME = AttributesEnum.txtCatName.index();
    public static final int TXTMODELNAME = AttributesEnum.txtModelName.index();
    public static final int SRVSTNPARTS = AttributesEnum.SrvStnparts.index();
    public static final int ACCSRVSTNSRVSTNPARTSPOPULATION = AttributesEnum.AccSrvStnSrvStnPartsPopulation.index();
    public static final int ACCSRVSTNSRVSTNPARTPRICE = AttributesEnum.AccSrvStnSrvStnPartPrice.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SrvStnImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("dgcom.model.eo.srv.SrvStn");
    }


    /**
     * Gets the attribute value for Stnno, using the alias name Stnno.
     * @return the value of Stnno
     */
    public String getStnno() {
        return (String) getAttributeInternal(STNNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Stnno.
     * @param value value to set the Stnno
     */
    public void setStnno(String value) {
        setAttributeInternal(STNNO, value);
    }

    /**
     * Gets the attribute value for Locationid, using the alias name Locationid.
     * @return the value of Locationid
     */
    public String getLocationid() {
        return (String) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Locationid.
     * @param value value to set the Locationid
     */
    public void setLocationid(String value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for Tolocationid, using the alias name Tolocationid.
     * @return the value of Tolocationid
     */
    public String getTolocationid() {
        return (String) getAttributeInternal(TOLOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tolocationid.
     * @param value value to set the Tolocationid
     */
    public void setTolocationid(String value) {
        setAttributeInternal(TOLOCATIONID, value);
    }

    /**
     * Gets the attribute value for Supplierid, using the alias name Supplierid.
     * @return the value of Supplierid
     */
    public String getSupplierid() {
        return (String) getAttributeInternal(SUPPLIERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Supplierid.
     * @param value value to set the Supplierid
     */
    public void setSupplierid(String value) {
        setAttributeInternal(SUPPLIERID, value);
    }

    /**
     * Gets the attribute value for DemandId, using the alias name DemandId.
     * @return the value of DemandId
     */
    public String getDemandId() {
        return (String) getAttributeInternal(DEMANDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DemandId.
     * @param value value to set the DemandId
     */
    public void setDemandId(String value) {
        setAttributeInternal(DEMANDID, value);
    }

    /**
     * Gets the attribute value for Stntype, using the alias name Stntype.
     * @return the value of Stntype
     */
    public String getStntype() {
        return (String) getAttributeInternal(STNTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Stntype.
     * @param value value to set the Stntype
     */
    public void setStntype(String value) {
        setAttributeInternal(STNTYPE, value);
    }

    /**
     * Gets the attribute value for Stndate, using the alias name Stndate.
     * @return the value of Stndate
     */
    public Date getStndate() {
        return (Date) getAttributeInternal(STNDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Stndate.
     * @param value value to set the Stndate
     */
    public void setStndate(Date value) {
        setAttributeInternal(STNDATE, value);
    }

    /**
     * Gets the attribute value for StnStatus, using the alias name StnStatus.
     * @return the value of StnStatus
     */
    public String getStnStatus() {
        return (String) getAttributeInternal(STNSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for StnStatus.
     * @param value value to set the StnStatus
     */
    public void setStnStatus(String value) {
        setAttributeInternal(STNSTATUS, value);
    }

    /**
     * Gets the attribute value for Fromdate, using the alias name Fromdate.
     * @return the value of Fromdate
     */
    public Date getFromdate() {
        return (Date) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fromdate.
     * @param value value to set the Fromdate
     */
    public void setFromdate(Date value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for Todate, using the alias name Todate.
     * @return the value of Todate
     */
    public Date getTodate() {
        return (Date) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Todate.
     * @param value value to set the Todate
     */
    public void setTodate(Date value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for Posted, using the alias name Posted.
     * @return the value of Posted
     */
    public String getPosted() {
        return (String) getAttributeInternal(POSTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Posted.
     * @param value value to set the Posted
     */
    public void setPosted(String value) {
        setAttributeInternal(POSTED, value);
    }

    /**
     * Gets the attribute value for Postedby, using the alias name Postedby.
     * @return the value of Postedby
     */
    public String getPostedby() {
        return (String) getAttributeInternal(POSTEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Postedby.
     * @param value value to set the Postedby
     */
    public void setPostedby(String value) {
        setAttributeInternal(POSTEDBY, value);
    }

    /**
     * Gets the attribute value for Createdby, using the alias name Createdby.
     * @return the value of Createdby
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Createdby.
     * @param value value to set the Createdby
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Modifiedby, using the alias name Modifiedby.
     * @return the value of Modifiedby
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Modifiedby.
     * @param value value to set the Modifiedby
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for IsMigrated, using the alias name IsMigrated.
     * @return the value of IsMigrated
     */
    public String getIsMigrated() {
        return (String) getAttributeInternal(ISMIGRATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsMigrated.
     * @param value value to set the IsMigrated
     */
    public void setIsMigrated(String value) {
        setAttributeInternal(ISMIGRATED, value);
    }

    /**
     * Gets the attribute value for MigratedDate, using the alias name MigratedDate.
     * @return the value of MigratedDate
     */
    public Date getMigratedDate() {
        return (Date) getAttributeInternal(MIGRATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MigratedDate.
     * @param value value to set the MigratedDate
     */
    public void setMigratedDate(Date value) {
        setAttributeInternal(MIGRATEDDATE, value);
    }

    /**
     * Gets the attribute value for txtFromStore, using the alias name txtFromStore.
     * @return the value of txtFromStore
     */
    public String gettxtFromStore() {
        return (String) getAttributeInternal(TXTFROMSTORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtFromStore.
     * @param value value to set the txtFromStore
     */
    public void settxtFromStore(String value) {
        setAttributeInternal(TXTFROMSTORE, value);
        if (getStntype().equals("STORE")) {
            doPopulateDetail("Fromstoreid", value);
        }
    }

    public void doPopulateDetail(String pColumnName,String pValue) {
        ViewObject vo=this.getDBTransaction().getRootApplicationModule().findViewObject("SrvStnpartsStoreDETCRUD");
        vo.first();
        vo.setCurrentRow(vo.first());
        if (vo.first().getAttribute(pColumnName)==null && vo.first().getAttribute("Partid")==null) {        
        vo.first().setAttribute("Fromstoreid", pValue);
        }
        while(vo.hasNext()) {
           Row r =vo.next();
            vo.setCurrentRow(r);
            if (r.getAttribute(pColumnName)==null && r.getAttribute("Partid")==null) {
                r.setAttribute(pColumnName, pValue);
            }
            
        }        
        vo.first();
        vo.setCurrentRow(vo.first());
        
    }
    
    /**
     * Gets the attribute value for txtToStore, using the alias name txtToStore.
     * @return the value of txtToStore
     */
    public String gettxtToStore() {
        return (String) getAttributeInternal(TXTTOSTORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtToStore.
     * @param value value to set the txtToStore
     */
    public void settxtToStore(String value) {
        setAttributeInternal(TXTTOSTORE, value);
    }

    /**
     * Gets the attribute value for txtDemandId, using the alias name txtDemandId.
     * @return the value of txtDemandId
     */
    public String gettxtDemandId() {
        return (String) getAttributeInternal(TXTDEMANDID);
    }


    @Override
    protected void validateEntity() {
        // TODO Implement this method
        System.out.println("TODO Implement this method");
        super.validateEntity();
    }

    /**
     * Sets <code>value</code> as the attribute value for txtDemandId.
     * @param value value to set the txtDemandId
     */
    public void settxtDemandId(String value) {
        setAttributeInternal(TXTDEMANDID, value);
        //try 
        {
            
            getAccSrvStnSrvStnPartsPopulation().setNamedWhereClauseParam("P_ADF_DEMAND_ID", value);
            
            getAccSrvStnSrvStnPartsPopulation().setNamedWhereClauseParam("P_ADF_FROM_STORE", gettxtFromStore());
           
            getAccSrvStnSrvStnPartsPopulation().setRangeSize(-1);
            getAccSrvStnSrvStnPartsPopulation().executeQuery();
            //getAccSrvStnSrvStnPartsPopulation().setRangeSize(-1);
     
            
            ApplicationModule am=this.getDBTransaction().getRootApplicationModule();
            ViewObject vo=am.findViewObject("SrvStnpartsDETCRUD");
           if (vo.getRowCount()>0) {
                vo.setCurrentRow(vo.first());
           } 
            
            if (1==1/* getAccSrvStnSrvStnPartsPopulation().getRowCount()>0 */) {
                
               // int totrow=getAccSrvStnSrvStnPartsPopulation().getRowCount();
              // for (int i = 0; i < totrow; i++) {
                  // System.out.println(i+ "this isi"+getAccSrvStnSrvStnPartsPopulation().getRowCount());
                RowSetIterator rsi=getAccSrvStnSrvStnPartsPopulation();
                while(rsi.hasNext()){
                    Row pop=rsi.next();
                    Row r=vo.createRow();
                    r.setNewRowState(Row.STATUS_NEW);
                    r.setAttribute("Fromstoreid",gettxtFromStore());
                    
                    r.setAttribute("Tostoreid",gettxtToStore());
                    r.setAttribute("Partid", pop.getAttribute("Partid"));
                    r.setAttribute("Dmditemid", pop.getAttribute("Dmditemid"));
                    r.setAttribute("Itemid", pop.getAttribute("Itemid"));
                    
                    r.setAttribute("Rate", pop.getAttribute("Movingrate"));
                    
                    r.setAttribute("txtDemandQty",pop.getAttribute("DmdQty"));
                    
                    r.setAttribute("txtStock",pop.getAttribute("Stock"));
                    
                   if (Integer.parseInt(pop.getAttribute("DmdQty").toString())<=Integer.parseInt(pop.getAttribute("Stock").toString()) ) {
                        r.setAttribute("Stnqty", pop.getAttribute("DmdQty"));
                   }
                   else
                   {
                       r.setAttribute("Stnqty", pop.getAttribute("Stock"));
                   }
                    
                    
                   getAccSrvStnSrvStnPartPrice().setNamedWhereClauseParam("P_ADF_STNDATE", getStndate());
                    
                   getAccSrvStnSrvStnPartPrice().setNamedWhereClauseParam("P_ADF_PART_ID", pop.getAttribute("Partid"));
                    
                   getAccSrvStnSrvStnPartPrice().executeQuery();
                    
                   getAccSrvStnSrvStnPartPrice().first();
                    
                    r.setAttribute("Salesrate",getAccSrvStnSrvStnPartPrice().first().getAttribute("Price"));
                    
                    vo.insertRow(r);
                    
                    vo.setCurrentRow(r);
                    
                }
                vo.executeQuery();
                //this.getDBTransaction().commit();
            }

        
        } /* catch (NullPointerException e) {
            e.printStackTrace();
        } */
        
    }



    /**
     * Gets the attribute value for txtModelID, using the alias name txtModelID.
     * @return the value of txtModelID
     */
    public String gettxtModelID() {
        return (String) getAttributeInternal(TXTMODELID);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtModelID.
     * @param value value to set the txtModelID
     */
    public void settxtModelID(String value) {
        setAttributeInternal(TXTMODELID, value);
    }

    /**
     * Gets the attribute value for txtCatID, using the alias name txtCatID.
     * @return the value of txtCatID
     */
    public String gettxtCatID() {
        return (String) getAttributeInternal(TXTCATID);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtCatID.
     * @param value value to set the txtCatID
     */
    public void settxtCatID(String value) {
        setAttributeInternal(TXTCATID, value);
    }

    /**
     * Gets the attribute value for txtFromStoreName, using the alias name txtFromStoreName.
     * @return the value of txtFromStoreName
     */
    public String gettxtFromStoreName() {
        return (String) getAttributeInternal(TXTFROMSTORENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtFromStoreName.
     * @param value value to set the txtFromStoreName
     */
    public void settxtFromStoreName(String value) {
        setAttributeInternal(TXTFROMSTORENAME, value);
    }

    /**
     * Gets the attribute value for txtToStoreName, using the alias name txtToStoreName.
     * @return the value of txtToStoreName
     */
    public String gettxtToStoreName() {
        return (String) getAttributeInternal(TXTTOSTORENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtToStoreName.
     * @param value value to set the txtToStoreName
     */
    public void settxtToStoreName(String value) {
        setAttributeInternal(TXTTOSTORENAME, value);
    }

    /**
     * Gets the attribute value for txtCatName, using the alias name txtCatName.
     * @return the value of txtCatName
     */
    public String gettxtCatName() {
        return (String) getAttributeInternal(TXTCATNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtCatName.
     * @param value value to set the txtCatName
     */
    public void settxtCatName(String value) {
        setAttributeInternal(TXTCATNAME, value);
    }

    /**
     * Gets the attribute value for txtModelName, using the alias name txtModelName.
     * @return the value of txtModelName
     */
    public String gettxtModelName() {
        return (String) getAttributeInternal(TXTMODELNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for txtModelName.
     * @param value value to set the txtModelName
     */
    public void settxtModelName(String value) {
        setAttributeInternal(TXTMODELNAME, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrvStnparts() {
        return (RowIterator) getAttributeInternal(SRVSTNPARTS);
    }


    /**
     * Gets the view accessor <code>RowSet</code> AccSrvStnSrvStnPartsPopulation.
     */
    public RowSet getAccSrvStnSrvStnPartsPopulation() {
        return (RowSet) getAttributeInternal(ACCSRVSTNSRVSTNPARTSPOPULATION);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AccSrvStnSrvStnPartPrice.
     */
    public RowSet getAccSrvStnSrvStnPartPrice() {
        return (RowSet) getAttributeInternal(ACCSRVSTNSRVSTNPARTPRICE);
    }


    /**
     * @param stnno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String stnno) {
        return new Key(new Object[] { stnno });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            ApplicationModule am=this.getDBTransaction().getRootApplicationModule();
            ViewObject        vo=am.findViewObject("mySrvSTNPK");
            if (vo!=null)
                {
                   vo.remove();     
                }
            vo=am.createViewObjectFromQueryStmt("mySrvSTNPK", "select FUNC_GET_DOCUMENT_ID('SRV_STN','STNNO','"+getLocationid()+"','"+DigicomClass.doGetFormattedDate(getStndate().toString(), "dd-MMM-yyyy")+"') from dual");
//            vo=am.createViewObjectFromQueryStmt("mySrvSTNPK",
//                                                "Select 2||'"+getLocationid()+"'||'"+DigicomClass.doGetFormattedDate(getStndate().toString(), "yyMM")+"'||Lpad(nvl(max(to_number(substr(STNNO,-4)))+1,1) ,4,'0') as PK \n"+
//                                                "from SRV_STN \n"+
//                                                "Where to_char(STNDate,'rrmm') ='"+ DigicomClass.doGetFormattedDate(getStndate().toString(), "yyMM")+"' \n"+
//                                                "and locationid = '"+getLocationid()+"'");
            vo.executeQuery();
            setStnno(vo.first().getAttribute(0).toString());
            /*for (int i = 0; i < getSrvInvItems().getRowCount(); i++) {
                getSrvInvItems().getRowAtRangeIndex(i).setAttribute("SrvInvno", vo.first().getAttribute(0).toString());
                System.out.println(i);
           }*/

        }
        super.doDML(operation, e);
    }
    
}

